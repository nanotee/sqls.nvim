*sqls-nvim.txt*		                Neovim plugin for the sqls language server

SETUP                                           *sqls-nvim-setup*

Enable the configuration with |vim.lsp.enable()| and |vim.lsp.config()|
>lua
    vim.lsp.config('sqls', {
        -- your custom client configuration
    })
    vim.lsp.enable('sqls')
<
See also: |lsp-config|
==============================================================================
COMMANDS                                        *sqls-nvim-commands*

                                                *:SqlsExecuteQuery*
:SqlsExecuteQuery          In normal mode, executes the query in the current
                           buffer. In visual mode, executes the selected query
                           (only works line-wise). Shows the results in a
                           |preview-window|.


                                                *:SqlsExecuteQueryVertical*
:SqlsExecuteQueryVertical  Same as `:SqlsExecuteQuery`, but the results are
                           displayed vertically.


                                                *:SqlsShowDatabases*
:SqlsShowDatabases         Shows a list of available databases in a
                           |preview-window|.

                                                *:SqlsShowSchemas*
:SqlsShowSchemas           Shows a list of available schemas in a
                           |preview-window|.

                                                *:SqlsShowConnections*
:SqlsShowConnections       Shows a list of available database connections in a
                           |preview-window|.

                                                *:SqlsSwitchDatabase*
:SqlsSwitchDatabase {database_name}
                           Switches to a different database. If
                           {database_name} is omitted, displays an interactive
                           prompt with |vim.ui.select()| to select a database.

                                                *:SqlsSwitchConnection*
:SqlsSwitchConnection {connection_index}
                           Switches to a different database connection. If
                           {connection_index} is omitted, displays an
                           interactive prompt with |vim.ui.select()| to select
                           a connection.

==============================================================================
MAPS                                            *sqls-nvim-maps*

                                                *<Plug>(sqls-execute-query)*
<Plug>(sqls-execute-query)           In visual mode, executes the selected
                                     range. In normal mode, executes a motion
                                     (like |ip| or |aw|)

                                                *<Plug>(sqls-execute-query-vertical)*
<Plug>(sqls-execute-query-vertical)  same as |<Plug>(sqls-execute-query)|, but
                                     the results are displayed vertically

==============================================================================
EVENTS                                          *sqls-nvim-events*

sqls.nvim dispatches custom |User| events that can be subscribed to using
|autocommand|s. It exposes custom data via the `data` key in Lua callbacks
(see |nvim_create_autocmd()|):
>lua
    vim.api.nvim_create_autocmd('User', {
        pattern = 'SqlsConnectionChoice',
        callback = function(event)
            vim.notify(event.data.choice)
        end,
    })
<
                                                *User_SqlsDatabaseChoice*
User SqlsDatabaseChoice
                           After switching databases. Callback data:
                           • choice: (string) the chosen database

                                                *User_SqlsConnectionChoice*
User SqlsConnectionChoice
                           After switching connections. Callback data:
                           • choice: (string) the chosen connection

vim:tw=78:et:ft=help:norl:
